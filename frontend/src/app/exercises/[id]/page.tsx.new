'use client';

import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Button, 
  Paper, 
  Chip, 
  Divider, 
  CircularProgress, 
  Alert, 
  Breadcrumbs, 
  Link as MuiLink, 
  IconButton
} from '@mui/material';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { getExercise, deleteExercise, defaultExercises, Exercise } from '../../../api/exercises';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import FitnessCenterIcon from '@mui/icons-material/FitnessCenter';
import Cookies from 'js-cookie';

export default function ExerciseDetailPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [exercise, setExercise] = useState<Exercise | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [deleteError, setDeleteError] = useState('');
  
  // Check if user is logged in
  const isLoggedIn = !!Cookies.get('token');

  useEffect(() => {
    const fetchExercise = async () => {
      try {
        // Convert id to number if needed
        const id = parseInt(params.id, 10);
        
        if (isNaN(id)) {
          throw new Error('Invalid exercise ID');
        }
        
        // Try to get from API
        const data = await getExercise(id);
        setExercise(data);
      } catch (err) {
        console.error('Failed to fetch exercise:', err);
        
        // Try to find in default exercises
        const defaultExercise = defaultExercises.find(e => e.id === parseInt(params.id, 10));
        
        if (defaultExercise) {
          setExercise(defaultExercise);
        } else {
          setError('Exercise not found');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchExercise();
  }, [params.id]);

  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this exercise?')) {
      return;
    }
    
    setDeleteLoading(true);
    setDeleteError('');
    
    try {
      await deleteExercise(parseInt(params.id, 10));
      router.push('/exercises');
    } catch (err: any) {
      setDeleteError(err.response?.data?.message || 'Failed to delete exercise');
      setDeleteLoading(false);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ py: 4, display: 'flex', justifyContent: 'center' }}>
        <CircularProgress />
      </Container>
    );
  }

  if (error || !exercise) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Alert severity="error" sx={{ mb: 3 }}>
          {error || 'Exercise not found'}
        </Alert>
        <Button
          startIcon={<ArrowBackIcon />}
          variant="outlined"
          component={Link}
          href="/exercises"
        >
          Back to Exercises
        </Button>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Breadcrumbs sx={{ mb: 3 }}>
        <MuiLink component={Link} href="/" color="inherit">
          Home
        </MuiLink>
        <MuiLink component={Link} href="/exercises" color="inherit">
          Exercises
        </MuiLink>
        <Typography color="text.primary">{exercise.name}</Typography>
      </Breadcrumbs>
      
      <Button
        startIcon={<ArrowBackIcon />}
        variant="outlined"
        component={Link}
        href="/exercises"
        sx={{ mb: 3 }}
      >
        Back to Exercises
      </Button>
      
      {deleteError && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {deleteError}
        </Alert>
      )}
      
      <Paper sx={{ p: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
          <Box>
            <Typography variant="h4" component="h1" gutterBottom fontWeight={700}>
              {exercise.name}
            </Typography>
            <Chip 
              icon={<FitnessCenterIcon />} 
              label={exercise.category} 
              color="primary" 
              sx={{ mb: 2 }} 
            />
          </Box>
          
          {isLoggedIn && (
            <Box>
              <IconButton 
                color="primary" 
                aria-label="edit exercise" 
                component={Link} 
                href={`/exercises/edit/${exercise.id}`}
                sx={{ mr: 1 }}
              >
                <EditIcon />
              </IconButton>
              <IconButton 
                color="error" 
                aria-label="delete exercise" 
                onClick={handleDelete}
                disabled={deleteLoading}
              >
                <DeleteIcon />
              </IconButton>
            </Box>
          )}
        </Box>
        
        <Box sx={{ 
          display: 'grid',
          gridTemplateColumns: { xs: '1fr', md: '2fr 1fr' },
          gap: 4
        }}>
          <Box>
            {exercise.description && (
              <Box sx={{ mb: 4 }}>
                <Typography variant="h6" gutterBottom>
                  Description
                </Typography>
                <Typography variant="body1">
                  {exercise.description}
                </Typography>
              </Box>
            )}
            
            {exercise.instructions && (
              <Box>
                <Typography variant="h6" gutterBottom>
                  Instructions
                </Typography>
                <Typography variant="body1" component="div">
                  {exercise.instructions.split('\n').map((paragraph, index) => (
                    <Typography key={index} paragraph>
                      {paragraph}
                    </Typography>
                  ))}
                </Typography>
              </Box>
            )}
          </Box>
          
          <Box>
            <Paper 
              variant="outlined" 
              sx={{ p: 3, mb: 3, borderRadius: 2 }}
            >
              <Typography variant="h6" gutterBottom>
                Exercise Details
              </Typography>
              
              <Divider sx={{ mb: 2 }} />
              
              <Box sx={{ mb: 2 }}>
                <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                  Category
                </Typography>
                <Typography variant="body1">{exercise.category}</Typography>
              </Box>
              
              {exercise.equipment && (
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                    Equipment
                  </Typography>
                  <Typography variant="body1">{exercise.equipment}</Typography>
                </Box>
              )}
              
              <Box sx={{ mb: 2 }}>
                <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                  Primary Muscles
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
                  {exercise.primaryMuscles.map((muscle) => (
                    <Chip 
                      key={muscle} 
                      label={muscle} 
                      size="small" 
                      variant="outlined" 
                      sx={{ mr: 0.5, mb: 0.5 }} 
                    />
                  ))}
                </Box>
              </Box>
              
              {exercise.secondaryMuscles && exercise.secondaryMuscles.length > 0 && (
                <Box>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                    Secondary Muscles
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
                    {exercise.secondaryMuscles.map((muscle) => (
                      <Chip 
                        key={muscle} 
                        label={muscle} 
                        size="small" 
                        variant="outlined" 
                        color="secondary"
                        sx={{ mr: 0.5, mb: 0.5 }} 
                      />
                    ))}
                  </Box>
                </Box>
              )}
            </Paper>
          </Box>
        </Box>
      </Paper>
    </Container>
  );
}
